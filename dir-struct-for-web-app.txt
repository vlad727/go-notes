Когда речь идет о разработке веб-приложения, которое взаимодействует с Kubernetes API для выполнения таких задач, 
как получение списка пространств имен (`Namespaces`), просмотр списков учетных записей служб (`Service Accounts`), 
управление привязками ролей кластеров (`ClusterRoleBindings`) и создание новых привязок ролей, стоит учитывать архитектуру, которая обеспечит гибкость, удобство сопровождения и тестирования.

Вот пример структуры проекта, которую можно использовать для такой задачи:

```bash
my-kubernetes-webapp/
├── cmd/                 # Исполняемые файлы
│   └── server/          # Основной серверный код
│       └── main.go      # Точка входа для сервера
├── internal/            # Внутренние компоненты, недоступные извне
│   ├── api/             # Обработка запросов API
│   │   └── handlers.go  # Обработчики HTTP-запросов
│   ├── models/          # Модели данных
│   │   └── namespace.go # Модель Namespace
│   │   └── sa.go        # Модель ServiceAccount
│   │   └── crb.go       # Модель ClusterRoleBinding
│   ├── services/        # Сервисы для обработки бизнес-логики
│   │   └── kubernetes.go# Сервис для взаимодействия с Kubernetes API
│   ├── middleware/      # Промежуточное ПО для обработки запросов
│   │   └── auth.go      # Мiddleware для аутентификации
│   ├── utils/           # Вспомогательные функции
│   │   └── helpers.go   
│   └── db/              # Работа с базой данных (если нужна)
│       └── db.go        
├── pkg/                 # Внешние пакеты
│   ├── config/          # Конфигурация приложения
│   │   └── config.go    
│   └── logging/         # Логирование
│       └── logger.go    
├── static/              # Статические файлы (HTML, CSS, JS)
│   ├── index.html       
│   ├── styles.css       
│   └── scripts.js       
├── templates/           # Шаблоны HTML
│   └── layout.html      
│   └── ns_list.html     
│   └── sa_list.html     
│   └── crb_list.html    
│   └── new_crb_form.html
├── Makefile             # Файл сборки проекта
├── Dockerfile           # Файл для создания образа контейнера
├── README.md            # Описание проекта
└── go.mod               # Менеджмент зависимостей Go
```

### Разбор структуры

1. **`cmd/server/main.go`**:
   - Здесь располагается основной код для запуска веб-сервера. Этот файл инициализирует роутер, подключает промежуточное ПО, конфигурирует логгеры и запускает сервер.

2. **`internal/api/handlers.go`**:
   - Содержит обработчики HTTP-запросов для различных маршрутов API. Например, маршруты для получения списка пространств имен, просмотра учетных записей служб и создания привязки роли кластера.

3. **`internal/models`**:
   - Директория для моделей данных, таких как `Namespace`, `ServiceAccount` и `ClusterRoleBinding`. Эти модели представляют собой структуры данных, которые будут использоваться для передачи информации между компонентами приложения.

4. **`internal/services/kubernetes.go`**:
   - Сервис для взаимодействия с Kubernetes API. Здесь будет реализована логика для получения списка пространств имен, учетных записей служб, привязок ролей кластера и создания новых привязок.

5. **`internal/middleware/auth.go`**:
   - Промежуточное ПО для аутентификации пользователей. Можно реализовать простую проверку токена или использовать более сложные механизмы аутентификации.

6. **`static` и `templates`**:
   - Директории для статических файлов (CSS, JavaScript) и шаблонов HTML соответственно. Они используются для рендеринга веб-страниц.

7. **`config` и `logging`**:
   - Пакет `config` содержит конфигурационные параметры приложения, а `logging` — реализацию логирования.

### Пример реализации

Ниже приведен пример основного кода для точки входа сервера (`cmd/server/main.go`):

```go
package main

import (
 "fmt"
 "net/http"
 "os"

 "github.com/gorilla/mux"
 "github.com/prometheus/common/log"
 "github.com/spf13/viper"

 "my-kubernetes-webapp/internal/api"
 "my-kubernetes-webapp/internal/services"
 "my-kubernetes-webapp/pkg/config"
 "my-kubernetes-webapp/pkg/loggi...
